(setq list '(-2 4 -3 5 -3 -2 3))

(defun sumRecursion (list)
  (let ((highestSum 0) (currentSum 0) (end 0))
    (do ((list list (rest list))
	(x 0 (1+ x)))
      ((endp list))
    (setf currentSum (max 0 (+ currentSum (car list))))
    (when (> currentSum highestSum)
      (setf end x
	    highestSum currentSum)))
  (let* ((sublist (subseq list 0 (1+ end)))
	 (sum (reduce #'+ sublist)))
    (do ((start 0 (1+ start))
	 (sublist sublist (cdr sublist))
	 (sum sum (- sum (car sublist))))
      ((or (endp sublist) (eql sum highestSum))
       (values highestSum sublist start (1+ end))))))
)
(princ "For list '-2 4 -3 5 -3 1 -2 3' ")
(terpri)
(princ "The highest summation of consecutive integers would be: ")
(write (sumRecursion list))
(terpri)
